#!/bin/python3
import random
flag= "a"*60
flag = flag.encode()
from Crypto.Util.number import bytes_to_long, getPrime, isPrime
import signal

def alarm(second):
    # This is just for timeout.
    # It should not do anything else with the challenge.
    def handler(signum, frame):
        print('Timeout!')
        exit()
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(second)

def gen_prime(n):
    while True:
        p = 1
        while p < (1 << (n - 1)) :
            p *= getPrime(5)
        p = p * 2 + 1
        if isPrime(p): break
    return p

def zkp_protocol(p, g, sk):
    
    # y = pow(g, sk, p) 
    r = random.randrange(p-1)
    
    a = pow(g, r, p)
    print(f'a = {a}')
    
    print('Give me the challenge')
    try:
        c = int(input('c = '))
        w = (c * sk + r) % (p-1)
        print(f'r = {r}')
        print(f'w = {w}')
        # g = 5
        # y = 5^flag mod p
        # a = 5^r mod p
        # w = c * flag + r mod (p-1)
        # you can verify I know the flag with 
        # 5^w (mod p) = (5^flag)^c * 5^r (mod p) = y^c * a (mod p)

    except:
        print('Invalid input.')
    
if __name__ == "__main__":
    alarm(300)
    assert len(flag) == 60
    p = 912963562570713895762123712634341582363191342435924527885311975797578046400116904692505817547350929619596093083745446525856149291591598712142696114753807416455553636357128701771057485027781550780145668058332461392878693207262984011086549089459904749465167095482671894984474035487400352761994560452501497000487
    # p is generated by gen_prime(1024)
    g = 5
    y = pow(g, bytes_to_long(flag), p)
    print("""
******************************************************
Have you heard of Zero Knowledge Proof? I cannot give 
you the flag, but I want to show you I know the flag.
So, let me show you with ZKP.
------------------------------------------------------
1) Printe public key.
2) Run ZKP protocol.
3) Bye~
******************************************************
    """)

    for _ in range(3):
        try:
            option = input("Option: ")
            if int(option) == 1:
                print('My public key:')
                print(f'p = {p}')
                print(f'g = {g}')
                print(f'y = {y}')

            elif int(option) == 2:
                zkp_protocol(p, g, bytes_to_long(flag))
            
            else:
                print("Bye~~~~~")
                break
        except:
            print("Something wrong?")
            exit()
