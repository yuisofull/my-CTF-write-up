# Option: 1
# My public key:
p = 912963562570713895762123712634341582363191342435924527885311975797578046400116904692505817547350929619596093083745446525856149291591598712142696114753807416455553636357128701771057485027781550780145668058332461392878693207262984011086549089459904749465167095482671894984474035487400352761994560452501497000487
g = 5
y = 418525309486788129595446536066952486882607477855961007698829413328595709533516356400672680704673970248934430781108827884688924475752178816389827693929614582626476392371232086890185744597246099871486704083602195970396008220570154059068863021035529022951212880823368636283507931096274679569083253248928845546708
# Option: 2
a = 293055436045196559951422859812123605714957503224876565729876670739989247961730968873017562419461720267071154099496730293939866125285965693565898702873900399408985337872756293216730079549409065904751408241163715281836459569720677705261891970910361339817937104393312066050443504384708526762257210139072706310544
# Give me the challenge
c = 0
w1 = 833391485278311873831836035661679056132625051553218880582632476021030475326163462960833864650260379085141458437755569739986355469314381583319825858864361781857788087767498400975908367605218642656852231157920558608256874079791681444984804238764875810797371070770498518298873515071959827299574686083524083626160
# Option: 2
a = 314513787046820574116222045701634008366543703486681434022891580760248733280563867754128512769954097217187780770818093755254330278823999058115946770243931016625229595989109320350399546048633713804376274820537291280498976110905155218006181911512731868969952698008297090548496589206286760586088557406195110658042
# Give me the challenge
c = 1
w2 = 440941181559973735611992014731225693499535052274520694185036767562171434714884883014702874113380007022306938515112965053466719226194862507718609153081681700174781863084986682336809201716567963216895995483319776347497765182645115994683241530707406718492683795601479206508938380558776273310255047202549873904982

from Crypto.Util.number import long_to_bytes
from sympy.ntheory import discrete_log
import math
import sympy

# y = 5^flag mod p
# find flag
# brute force every possible flag
def baby_steps_giant_steps(a,b,p,N = None):
    if not N: N = 1 + int(sympy.sqrt(p))

    #initialize baby_steps table
    baby_steps = {}
    baby_step = 1
    for r in range(N+1):
        baby_steps[baby_step] = r
        baby_step = baby_step * a % p

    #now take the giant steps
    giant_stride = pow(a,(p-2)*N,p)
    giant_step = b
    for q in range(N+1):
        if giant_step in baby_steps:
            return q*N + baby_steps[giant_step]
        else:
            giant_step = giant_step * giant_stride % p
    return "No Match"

y = 826538666839613533825164219540577914201103248283631882579415248247469603672292332561005185045449294103457059566058782307774879654805356212117148864755019033392691510181464751398765490686084806155442759849410837406192708511190585484331707794669398717997173649869228717077858848442336016926370038781486833717341
p = 912963562570713895762123712634341582363191342435924527885311975797578046400116904692505817547350929619596093083745446525856149291591598712142696114753807416455553636357128701771057485027781550780145668058332461392878693207262984011086549089459904749465167095482671894984474035487400352761994560452501497000487
#flag = baby_steps_giant_steps(5, y, p)
flag = discrete_log(p, y, 5)
print(long_to_bytes(flag))