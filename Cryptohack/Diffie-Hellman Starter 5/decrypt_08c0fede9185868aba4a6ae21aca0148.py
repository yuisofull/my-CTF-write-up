from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib


def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))


def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:16]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)

    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, 16)
    else:
        return plaintext


shared_secret = pow(1369965841922625996709887864858558151248247288580070789962670155065092995878605832751927322696050597912890086246439141525690293624493522210419533659415916099676145479325547966424525238063252667361645658920051590011857641621717331822449283669539836768669594484263237132739573461031760625498625102608111770901636189944043478126844378340530472407202026724051543013941612390300189391630090399261510503994583752170929743434083992531567556553617184549402199890273304587,2, 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919)
iv = '14ec82516f8a7921c3c764287402b04d'
ciphertext = '6f8e05461650dc650dccb0f47db3f1884d3d1ac282ec57bb06720c8c75cc48e9'

print(decrypt_flag(shared_secret, iv, ciphertext))
